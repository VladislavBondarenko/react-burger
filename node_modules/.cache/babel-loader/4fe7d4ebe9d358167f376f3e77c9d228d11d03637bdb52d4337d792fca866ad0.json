{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useMemo } from \"react\";\nconst useFilterIngredient = (ingredients, targetType) => {\n  _s();\n  return useMemo(() => ingredients ? ingredients.filter(_ref => {\n    let {\n      type\n    } = _ref;\n    return type === targetType;\n  }) : [], [ingredients, targetType]);\n};\n_s(useFilterIngredient, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\nexport const useGroupIngredients = ingredients => {\n  _s2();\n  return {\n    buns: useFilterIngredient(ingredients, \"bun\"),\n    sauces: useFilterIngredient(ingredients, \"sauce\"),\n    mains: useFilterIngredient(ingredients, \"main\")\n  };\n};\n_s2(useGroupIngredients, \"VdH1tCZazW61H7AhJGe6o/S307c=\", false, function () {\n  return [useFilterIngredient, useFilterIngredient, useFilterIngredient];\n});","map":{"version":3,"names":["useMemo","useFilterIngredient","ingredients","targetType","filter","type","useGroupIngredients","buns","sauces","mains"],"sources":["/Users/vlad/Desktop/dev/react-burger/src/hooks/useFilteredIngredient.jsx"],"sourcesContent":["import { useMemo } from \"react\";\n\nconst useFilterIngredient = (ingredients, targetType) =>\n  useMemo(\n    () =>\n      ingredients ? ingredients.filter(({ type }) => type === targetType) : [],\n    [ingredients, targetType]\n  );\n\nexport const useGroupIngredients = (ingredients) => ({\n  buns: useFilterIngredient(ingredients, \"bun\"),\n  sauces: useFilterIngredient(ingredients, \"sauce\"),\n  mains: useFilterIngredient(ingredients, \"main\"),\n});\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,MAAMC,mBAAmB,GAAG,CAACC,WAAW,EAAEC,UAAU;EAAA;EAAA,OAClDH,OAAO,CACL,MACEE,WAAW,GAAGA,WAAW,CAACE,MAAM,CAAC;IAAA,IAAC;MAAEC;IAAK,CAAC;IAAA,OAAKA,IAAI,KAAKF,UAAU;EAAA,EAAC,GAAG,EAAE,EAC1E,CAACD,WAAW,EAAEC,UAAU,CAAC,CAC1B;AAAA;AAAC,GALEF,mBAAmB;AAOzB,OAAO,MAAMK,mBAAmB,GAAIJ,WAAW;EAAA;EAAA,OAAM;IACnDK,IAAI,EAAEN,mBAAmB,CAACC,WAAW,EAAE,KAAK,CAAC;IAC7CM,MAAM,EAAEP,mBAAmB,CAACC,WAAW,EAAE,OAAO,CAAC;IACjDO,KAAK,EAAER,mBAAmB,CAACC,WAAW,EAAE,MAAM;EAChD,CAAC;AAAA,CAAC;AAAC,IAJUI,mBAAmB;EAAA,QACxBL,mBAAmB,EACjBA,mBAAmB,EACpBA,mBAAmB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}